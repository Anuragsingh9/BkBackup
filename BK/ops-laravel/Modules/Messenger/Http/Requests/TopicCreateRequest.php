<?php

namespace Modules\Messenger\Http\Requests;

use App\Workshop;
use App\WorkshopMeta;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;
use Modules\Messenger\Rules\NoSpecialCharRule;


class TopicCreateRequest extends FormRequest {
    
    public function rules() {
        return [
            'topic_name'  => [
                'required',
                'string',
                new NoSpecialCharRule,
                'max:' . config('messenger.validations.topic_name'),
                Rule::unique('tenant.im_topics', 'topic_name')->where('workshop_id', $this->workshop_id),
            ],
            'workshop_id' => 'required|exists:tenant.workshops,id',
        ];
    }
    
    protected function validationData() {
        $all = parent::validationData();
        //Convert request value to lowercase
        if (isset($all['topic_name']))
            $all['topic_name'] = strtolower($all['topic_name']);
        return $all;
    }
    
    public function authorize() {
        $workshop = Workshop::find($this->workshop_id);
        if ($workshop && !(in_array(Auth::user()->role, ['M0', 'M1']))) {
            $meta = WorkshopMeta::where('workshop_id', $this->workshop_id)
                ->where('user_id', Auth::user()->id)
                ->where(function ($q) {
                    $q->where('role', 1);
                    $q->orWhere('role', 2);
                })->count();
            return (boolean)$meta;
        }
        return TRUE;
    }
    
    protected function failedValidation(Validator $validator) {
        throw new HttpResponseException(response()->json([
            'status' => FALSE,
            'msg'    => implode(',', $validator->errors()->all())
        ], 422));
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
}
