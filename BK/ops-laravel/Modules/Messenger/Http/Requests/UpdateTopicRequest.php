<?php

namespace Modules\Messenger\Http\Requests;

use App\Workshop;
use App\WorkshopMeta;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;
use Modules\Messenger\Entities\WorkshopTopic;
use Modules\Messenger\Rules\NoSpecialCharRule;
use Modules\Messenger\Rules\UniqueTopicName;


class UpdateTopicRequest extends FormRequest {
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules() {
        return [
            'topic_id'   => ['required', Rule::exists('tenant.im_topics', 'id')->whereNull('deleted_at')],
            'topic_name'  => [
                'required',
                'string',
                new NoSpecialCharRule,
                'max:' . config('messenger.validations.topic_name'),
                new UniqueTopicName($this->topic_id),
            ],
        ];
    }
    
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize() {
        $topic = WorkshopTopic::find($this->topic_id);
        if ($topic && !(in_array(Auth::user()->role, ['M0', 'M1']))) {
            $workshop = Workshop::whereHas('meta', function ($q) {
                $q->where('user_id', Auth::user()->id);
                $q->where(function ($q) {
                    $q->where('role', 1);
                    $q->orWhere('role', 2);
                });
            })->where('id', $topic->workshop_id)->count();
            return (boolean)$workshop;
        }
        return TRUE;
    }
    
    protected function failedValidation(Validator $validator) {
        throw new HttpResponseException(response()->json([
            'status' => FALSE,
            'msg'    => implode(',', $validator->errors()->all())
        ],422));
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
}
