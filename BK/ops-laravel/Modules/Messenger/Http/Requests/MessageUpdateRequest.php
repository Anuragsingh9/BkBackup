<?php

namespace Modules\Messenger\Http\Requests;

use App\Rules\UUID;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rule;
use Modules\Messenger\Entities\Message;

class MessageUpdateRequest extends FormRequest {
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules() {
        return [
            'message_id'   => [
                'required',
                Rule::exists('tenant.im_messages', 'id')->whereNull('deleted_at'),
            ],
            'text'         => 'required|string|max:' . config('messenger.validations.message_text'),
            'channel_uuid' => [
                'required',
                Rule::exists('tenant.im_channels', 'uuid')->whereNull('deleted_at'),
                Rule::exists('tenant.im_messages', 'channel_uuid')->where('id', $this->message_id),
            ]
        ];
    }
    
    
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize() {
        $message = Message::find($this->message_id);
        if ($message) { // if message found check otherwise validation will do its job,
            // Auth::user()->role == 'M0' || Auth::user()->role == 'M1' ||
            return
                $message->sender_id == Auth::user()->id;
        }
        return TRUE;
    }
    
    protected function validationData() {
        $all = parent::validationData();
        //Convert request value to lowercase
        if (isset($all['text']))
            $all['text'] = strip_tags($all['text']);
        return $all;
    }
    
    protected function failedValidation(Validator $validator) {
        throw new HttpResponseException(response()->json([
            'status' => FALSE,
            'msg'    => implode(',', $validator->errors()->all())
        ], 422));
//        parent::failedValidation($validator); // TODO: Change the autogenerated stub
    }
}
